<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PusherServer</name>
    </assembly>
    <members>
        <member name="M:PusherServer.IAuthenticationData.ToJson">
            <summary>
            Returns a Json representation of the authentication data.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PusherServer.IAuthenticationData.channel_data">
            <summary>
            Double encoded JSON containing presence channel user information.
            </summary>
        </member>
        <member name="P:PusherServer.AuthenticationData.channel_data">
            <summary>
            Double encoded JSON containing presence channel user information.
            </summary>
        </member>
        <member name="T:PusherServer.DefaultJsonBodySerializer">
            <summary>
            An implementation of <see cref="T:PusherServer.IBodySerializer"/> that uses <see cref="T:RestSharp.Serializers.JsonSerializer"/> for its implementation.
            </summary>
        </member>
        <member name="T:PusherServer.IBodySerializer">
            <summary>
            Responsible for serializing the message body to a string.
            </summary>
        </member>
        <member name="M:PusherServer.IBodySerializer.Serialize(System.Object)">
            <summary>
            Serializes the body to a string.
            </summary>
            <param name="body">The object to serialize.</param>
            <returns>The serialized body.</returns>
        </member>
        <member name="M:PusherServer.DefaultJsonBodySerializer.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:PusherServer.IGetResult`1">
            <summary>
            The result of a GET HTTP request to the Pusher REST API.
            </summary>
            <typeparam name="T">The object type that the data returned from the request should be deserialized to.</typeparam>
        </member>
        <member name="P:PusherServer.IGetResult`1.Data">
            <summary>
            Gets the data returned from the request in a deserialized form.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:PusherServer.IPusher">
            <summary>
            Provides access to functionality within the Pusher service such as <see cref="M:PusherServer.IPusher.Trigger(System.String,System.String,System.Object)"/> to trigger events
            and authenticating subscription requests to private and presence channels.
            </summary>
        </member>
        <member name="M:PusherServer.IPusher.Trigger(System.String,System.String,System.Object)">
            <summary>
            Triggers an event on the specified channel.
            </summary>
            <param name="channelName">The name of the channel the event should be triggered on.</param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.IPusher.Trigger(System.String[],System.String,System.Object)">
            <summary>
            Triggers an event on the specified channels.
            </summary>
            <param name="channelNames">The names of the channels the event should be triggered on.</param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.IPusher.Trigger(System.String,System.String,System.Object,PusherServer.ITriggerOptions)">
            <summary>
            Triggers an event on the specified channel.
            </summary>
            <param name="channelName">The name of the channel the event should be triggered on.</param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <param name="options">Additional options to be used when triggering the event. See <see cref="T:PusherServer.ITriggerOptions"/>.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.IPusher.Trigger(System.String[],System.String,System.Object,PusherServer.ITriggerOptions)">
            <summary>
            Triggers an event on the specified channels.
            </summary>
            <param name="channelName">The name of the channels the event should be triggered on.</param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <param name="options">Additional options to be used when triggering the event. See <see cref="T:PusherServer.ITriggerOptions"/>.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.IPusher.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the subscription request for a private channel.
            </summary>
            <param name="channelName">Name of the channel to be authenticated.</param>
            <param name="socketId">The socket id which uniquely identifies the connection attempting to subscribe to the channel.</param>
            <returns>Authentication data where the required authentication token can be accessed via <see cref="P:PusherServer.IAuthenticationData.auth"/></returns>
        </member>
        <member name="M:PusherServer.IPusher.Authenticate(System.String,System.String,PusherServer.PresenceChannelData)">
            <summary>
            Authenticates the subscription request for a presence channel.
            </summary>
            <param name="channelName">Name of the channel to be authenticated.</param>
            <param name="socketId">The socket id which uniquely identifies the connection attempting to subscribe to the channel.</param>
            <param name="presenceData">Information about the user subscribing to the presence channel.</param>
            <exception cref="!:ArgumentNullException">If <paramref name="presenceData"/> is null</exception>
            <returns>Authentication data where the required authentication token can be accessed via <see cref="P:PusherServer.IAuthenticationData.auth"/></returns>
        </member>
        <member name="M:PusherServer.IPusher.Get``1(System.String)">
            <summary>
            Makes a GET request to the specified resource. Authentication is handled as part of the call. The data returned from the request is deserizlized to the object type defined by <paramref name="T"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource">The resource.</param>
            <returns>The result of the GET request</returns>
        </member>
        <member name="M:PusherServer.IPusher.Get``1(System.String,System.Object)">
            <summary>
            Makes a GET request to the specified resource. Authentication is handled as part of the call. The data returned from the request is deserizlized to the object type defined by <paramref name="T" />.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resource">The resource.</param>
            <param name="parameters">Additional parameters to be sent as part of the request query string.</param>
            <returns>
            The result of the GET request
            </returns>
        </member>
        <member name="M:PusherServer.IPusher.ProcessWebHook(System.String,System.String)">
            <summary>
            Handle an incoming WebHook and validate it.
            </summary>
            <param name="signature">The signature of the incoming WebHook</param>
            <param name="body">The body of the incoming Webhook request</param>
            <returns>A WebHook helper.</returns>
        </member>
        <member name="P:PusherServer.IPusherOptions.RestClient">
            <summary>
            Gets or sets the rest client. Generally only expected to be used for testing.
            </summary>
            <value>
            The rest client.
            </value>
        </member>
        <member name="P:PusherServer.IPusherOptions.Encrypted">
            <summary>
            Gets or sets a value indicating whether calls to the Pusher REST API are over HTTP or HTTPS.
            </summary>
            <value>
              <c>true</c> if encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PusherServer.IPusherOptions.Port">
            <summary>
            Gets or sets the REST API port that the HTTP calls will be made to.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="T:PusherServer.ITriggerOptions">
            <summary>
            Additional options that can be used when triggering an event.
            </summary>
        </member>
        <member name="P:PusherServer.IWebHook.IsValid">
            <summary>
            Indicates if the WebHook has validated.
            </summary>
        </member>
        <member name="P:PusherServer.IWebHook.Events">
            <summary>
            The Events in the WebHook
            </summary>
        </member>
        <member name="P:PusherServer.IWebHook.Time">
            <summary>
            The timestamp of the WebHook
            </summary>
        </member>
        <member name="P:PusherServer.IWebHook.ValidationErrors">
            <summary>
            An array of validation errors. If <see cref="P:PusherServer.IWebHook.IsValid"/> is true then the array
            will have no elements.
            </summary>
        </member>
        <member name="T:PusherServer.PresenceChannelData">
            <summary>
            Information about a user who is subscribing to a presence channel.
            </summary>
        </member>
        <member name="P:PusherServer.PresenceChannelData.user_id">
            <summary>
            A unique user identifier for the user witin the application.
            </summary>
            <remarks>
            Pusher uses this to uniquely identify a user. So, if multiple users are given the same <code>user_id</code>
            the second of these users will be ignored and won't be represented on the presence channel.
            </remarks>
        </member>
        <member name="P:PusherServer.PresenceChannelData.user_info">
            <summary>
            Arbitrary additional information about the user.
            </summary>
        </member>
        <member name="T:PusherServer.Pusher">
            <summary>
            Provides access to functionality within the Pusher service such as <see cref="M:PusherServer.Pusher.Trigger(System.String,System.String,System.Object)"/> to trigger events
            and authenticating subscription requests to private and presence channels.
            </summary>
        </member>
        <member name="M:PusherServer.Pusher.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PusherServer.Pusher"/> class.
            </summary>
            <param name="appId">The app id.</param>
            <param name="appKey">The app key.</param>
            <param name="appSecret">The app secret.</param>
        </member>
        <member name="M:PusherServer.Pusher.#ctor(System.String,System.String,System.String,PusherServer.IPusherOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:PusherServer.Pusher"/> class.
            </summary>
            <param name="appId">The app id.</param>
            <param name="appKey">The app key.</param>
            <param name="appSecret">The app secret.</param>
            <param name="options">Additional options to be used with the instance e.g. setting the call to the REST API to be made over HTTPS.</param>
        </member>
        <member name="M:PusherServer.Pusher.Trigger(System.String,System.String,System.Object)">
            <summary>
            Triggers an event on the specified channel.
            </summary>
            <param name="channelName">The name of the channel the event should be triggered on.</param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.Pusher.Trigger(System.String[],System.String,System.Object)">
            <summary>
            Triggers an event on the specified channels.
            </summary>
            <param name="channelNames">The names of the channels the event should be triggered on.</param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.Pusher.Trigger(System.String,System.String,System.Object,PusherServer.ITriggerOptions)">
            <summary>
            Triggers an event on the specified channel.
            </summary>
            <param name="channelName">The name of the channel the event should be triggered on.</param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <param name="options">Additional options to be used when triggering the event. See <see cref="T:PusherServer.ITriggerOptions"/>.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.Pusher.Trigger(System.String[],System.String,System.Object,PusherServer.ITriggerOptions)">
            <summary>
            Triggers an event on the specified channels.
            </summary>
            <param name="channelNames"></param>
            <param name="eventName">The name of the event.</param>
            <param name="data">The data to be sent with the event. The event payload.</param>
            <param name="options">Additional options to be used when triggering the event. See <see cref="T:PusherServer.ITriggerOptions"/>.</param>
            <returns>The result of the call to the REST API</returns>
        </member>
        <member name="M:PusherServer.Pusher.Authenticate(System.String,System.String)">
            <summary>
            Authenticates the subscription request for a private channel.
            </summary>
            <param name="channelName">Name of the channel to be authenticated.</param>
            <param name="socketId">The socket id which uniquely identifies the connection attempting to subscribe to the channel.</param>
            <returns>
            Authentication data where the required authentication token can be accessed via <see cref="P:PusherServer.IAuthenticationData.auth"/>
            </returns>
        </member>
        <member name="M:PusherServer.Pusher.Authenticate(System.String,System.String,PusherServer.PresenceChannelData)">
            <summary>
            Authenticates the subscription request for a presence channel.
            </summary>
            <param name="channelName">Name of the channel to be authenticated.</param>
            <param name="socketId">The socket id which uniquely identifies the connection attempting to subscribe to the channel.</param>
            <param name="presenceData">Information about the user subscribing to the presence channel.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="presenceData"/> is null</exception>
            <returns>Authentication data where the required authentication token can be accessed via <see cref="P:PusherServer.IAuthenticationData.auth"/></returns>
        </member>
        <member name="P:PusherServer.Pusher.VERSION">
            <summary>
            Pusher library version information.
            </summary>
        </member>
        <member name="P:PusherServer.Pusher.LIBRARY_NAME">
            <summary>
            The Pusher library name.
            </summary>
        </member>
        <member name="P:PusherServer.Pusher.BodySerializer">
            <summary>
            The serializer to use for the body of the messages.
            </summary>
        </member>
        <member name="T:PusherServer.PusherOptions">
            <summary>
            Options to be set on the <see cref="T:PusherServer.Pusher">Pusher</see> instance.
            </summary>
        </member>
        <member name="P:PusherServer.PusherOptions.Encrypted">
            <summary>
            Gets or sets a value indicating whether calls to the Pusher REST API are over HTTP or HTTPS.
            </summary>
            <value>
              <c>true</c> if encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PusherServer.PusherOptions.Port">
            <summary>
            Gets or sets the REST API port that the HTTP calls will be made to.
            </summary>
            <value>
            The port.
            </value>
        </member>
        <member name="P:PusherServer.PusherOptions.RestClient">
            <summary>
            Gets or sets the rest client. Generally only expected to be used for testing.
            </summary>
            <value>
            The rest client.
            </value>
        </member>
        <member name="T:PusherServer.RawBodySerializer">
            <summary>
            An implementation of the <see cref="T:PusherServer.IBodySerializer"/> that passes through the raw string.
            </summary>
        </member>
        <member name="M:PusherServer.RawBodySerializer.Serialize(System.Object)">
            <summary>
            Presumes we are getting a string as the body, and passes it through.
            </summary>
            <param name="body">The string body to pass through.</param>
            <returns>The body passed in.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the body provided is not a string.</exception>
        </member>
        <member name="T:PusherServer.TriggerBody">
            <summary>
            Represents the payload to be sent when triggering events
            </summary>
        </member>
        <member name="P:PusherServer.TriggerBody.name">
            <summary>
            The name of the event
            </summary>
        </member>
        <member name="P:PusherServer.TriggerBody.data">
            <summary>
            The event data
            </summary>
        </member>
        <member name="P:PusherServer.TriggerBody.channels">
            <summary>
            The channels the event should be triggered on.
            </summary>
        </member>
        <member name="P:PusherServer.TriggerBody.socket_id">
            <summary>
            The id of a socket to be excluded from receiving the event.
            </summary>
        </member>
        <member name="T:PusherServer.ValidationHelper">
            <summary>
            Helps validation of channel names and socket_id values.
            </summary>
        </member>
        <member name="F:PusherServer.ValidationHelper.CHANNEL_NAME_REGEX">
            <summary>
            A regular expression to check that a channel name is in a format allowed and accepted by Pusher.
            </summary>
        </member>
        <member name="F:PusherServer.ValidationHelper.CHANNEL_NAME_MAX_LENGTH">
            <summary>
            The maximum length of a channel name allowed by Pusher.
            </summary>
        </member>
        <member name="F:PusherServer.ValidationHelper.SOCKET_ID_REGEX">
            <summary>
            A regular expression to check that a socket_id is in a format allowed and accepted by Pusher.
            </summary>
        </member>
        <member name="M:PusherServer.ValidationHelper.ValidateSocketId(System.String)">
            <summary>
            Validate a socket_id value
            </summary>
            <param name="socketId">The value to be checked.</param>
            <exception cref="T:System.FormatException">If the socket_id name is not in the allowed format.</exception>
        </member>
        <member name="M:PusherServer.ValidationHelper.ValidateChannelName(System.String)">
            <summary>
            Validate a single channel name is in the allowed format.
            </summary>
            <param name="channelName">The channel name to be checked</param>
            <exception cref="T:System.FormatException">If the channel name is not in the allowed format.</exception>
        </member>
        <member name="M:PusherServer.ValidationHelper.ValidateChannelNames(System.String[])">
            <summary>
            Validate an array of channel names
            </summary>
            <param name="channelNames">The array of channel names</param>
            <exception cref="T:System.FormatException">If any channel names are not in the allowed format.</exception>
        </member>
    </members>
</doc>
